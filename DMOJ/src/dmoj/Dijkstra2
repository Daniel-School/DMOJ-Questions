import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;

class Dijkstra{
	static int dist[]; 
	static Set<Integer> visited; 
	static PriorityQueue<Node> pqueue; 
	static int numOfVertices; // Number of vertices 
	static List<List<Node> > adj_list; 
	
	public static void main(String arg[])   { 
		int V = 6; 
		int source = 0; 
		// adjacency list representation of graph
		List<List<Node> > adj_list = new ArrayList<List<Node> >(); 
		// Initialize adjacency list for every node in the graph 
		for (int i = 0; i < V; i++) { 
			List<Node> item = new ArrayList<Node>(); 
			adj_list.add(item); 
		} 

		// Input graph edges 
		adj_list.get(0).add(new Node(1, 5)); 
		adj_list.get(0).add(new Node(2, 3)); 
		adj_list.get(0).add(new Node(3, 2)); 
		adj_list.get(0).add(new Node(4, 3));
		adj_list.get(0).add(new Node(5, 3));
		adj_list.get(2).add(new Node(1, 2)); 
		adj_list.get(2).add(new Node(3, 3)); 
		
		// call Dijkstra's algo method  
		numOfVertices = V; 
		dist = new int[V]; 
		visited = new HashSet<Integer>(); 
		pqueue = new PriorityQueue<Node>();
		algo_dijkstra(adj_list, source); 

		// Print the shortest path from source node to all the nodes 
		System.out.println("The shorted path from source node to other nodes:"); 
		System.out.println("Source\t\t" + "Node#\t\t" + "Distance");
		for (int i = 0; i < dist.length; i++) 
			System.out.println(source + " \t\t " + i + " \t\t "  + dist[i]); 
	} 
	
	// Dijkstra's Algorithm implementation 
	public static void algo_dijkstra(List<List<Node> > list, int src_vertex) 
	{ 
		adj_list = list; 

		for (int i = 0; i < numOfVertices; i++) 
			dist[i] = Integer.MAX_VALUE; 

		// first add source vertex to PriorityQueue 
		pqueue.add(new Node(src_vertex, 0)); 

		// Distance to the source from itself is 0 
		dist[src_vertex] = 0; 
		while (visited.size() != numOfVertices) { 

			// u is removed from PriorityQueue and has min distance  
			int u = pqueue.remove().node; 

			// add node to finalized list (visited)
			visited.add(u); 
			graph_adjacentNodes(u); 
		} 
	}
	
	// this methods processes all neighbours of the just visited node 
	private static void graph_adjacentNodes(int currentNode)   { 
		int edgeDistance = -1; 
		int newDistance = -1; 

		// process all neighbouring nodes of u 
		for (int i = 0; i < adj_list.get(currentNode).size(); i++) { 
			Node v = adj_list.get(currentNode).get(i); 

			//  proceed only if current node is not in 'visited'
			if (!visited.contains(v.node)) { 
				edgeDistance = v.cost; 
				newDistance = dist[currentNode] + edgeDistance; 

				// compare distances 
				if (newDistance < dist[v.node]) 
					dist[v.node] = newDistance; 

				// Add the current vertex to the PriorityQueue 
				pqueue.add(new Node(v.node, dist[v.node])); 
			} 
		} 
	} 
}


// Node class  
class Node implements Comparable<Node> { 
	public int node; 
	public int cost;

	//Constructor
	public Node(int node, int cost) { 
		this.node = node; 
		this.cost = cost;
	} 
	@Override
	public int compareTo(Node node2) 
	{ 
		if (this.cost < node2.cost) 
			return -1; 
		if (this.cost > node2.cost) 
			return 1; 
		return 0; 
	} 

}
